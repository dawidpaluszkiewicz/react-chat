"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var equals_1 = require("./equals");
var pipe_1 = require("./pipe");
var take_1 = require("./take");
var uniqWith_1 = require("./uniqWith");
var _counter_1 = require("./_counter");
var source = [{ a: 1 }, { a: 2 }, { a: 2 }, { a: 5 }, { a: 1 }, { a: 6 }, { a: 7 }];
var expected = [{ a: 1 }, { a: 2 }, { a: 5 }, { a: 6 }, { a: 7 }];
describe('data_first', function () {
    test('should return uniq', function () {
        expect((0, uniqWith_1.uniqWith)(source, equals_1.equals)).toEqual(expected);
    });
});
describe('data_last', function () {
    test('should return uniq', function () {
        expect((0, uniqWith_1.uniqWith)(equals_1.equals)(source)).toEqual(expected);
    });
    it('lazy', function () {
        var counter = (0, _counter_1.createCounter)();
        var result = (0, pipe_1.pipe)([{ a: 1 }, { a: 2 }, { a: 2 }, { a: 5 }, { a: 1 }, { a: 6 }, { a: 7 }], counter.fn(), (0, uniqWith_1.uniqWith)(equals_1.equals), (0, take_1.take)(3));
        expect(counter.count).toHaveBeenCalledTimes(4);
        expect(result).toEqual([{ a: 1 }, { a: 2 }, { a: 5 }]);
    });
    it('take before uniq', function () {
        // bug from https://github.com/remeda/remeda/issues/14
        var counter = (0, _counter_1.createCounter)();
        var result = (0, pipe_1.pipe)([{ a: 1 }, { a: 2 }, { a: 2 }, { a: 5 }, { a: 1 }, { a: 6 }, { a: 7 }], counter.fn(), (0, take_1.take)(3), (0, uniqWith_1.uniqWith)(equals_1.equals));
        expect(counter.count).toHaveBeenCalledTimes(3);
        expect(result).toEqual([{ a: 1 }, { a: 2 }]);
    });
});
