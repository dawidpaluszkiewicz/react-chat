import { LazyResult } from './_reduceLazy';
declare type IsEquals<T> = (a: T, b: T) => boolean;
/**
 * Returns a new array containing only one copy of each element in the original list.
 * Elements are compared by custom comparator isEquals.
 * @param array
 * @param isEquals the comparator
 * @signature
 *    R.uniqWith(array, isEquals)
 * @example
 *    R.uniqWith(
 *      [{a: 1}, {a: 2}, {a: 2}, {a: 5}, {a: 1}, {a: 6}, {a: 7}],
 *      R.equals,
 *    ) // => [{a: 1}, {a: 2}, {a: 5}, {a: 6}, {a: 7}]
 * @data_first
 * @category Array
 */
export declare function uniqWith<T>(array: readonly T[], isEquals: IsEquals<T>): T[];
/**
 * Returns a new array containing only one copy of each element in the original list.
 * Elements are compared by custom comparator isEquals.
 * @param isEquals the comparator
 * @signature R.uniqWith(isEquals)(array)
 * @example
 *    R.uniqWith(R.equals)(
 *      [{a: 1}, {a: 2}, {a: 2}, {a: 5}, {a: 1}, {a: 6}, {a: 7}],
 *    ) // => [{a: 1}, {a: 2}, {a: 5}, {a: 6}, {a: 7}]
 *    R.pipe(
 *      [{a: 1}, {a: 2}, {a: 2}, {a: 5}, {a: 1}, {a: 6}, {a: 7}], // only 4 iterations
 *      R.uniqWith(R.equals),
 *      R.take(3)
 *    ) // => [{a: 1}, {a: 2}, {a: 5}]
 * @data_last
 * @category Object
 */
export declare function uniqWith<T>(isEquals: IsEquals<T>): (array: readonly T[]) => T[];
declare function _lazy<T>(isEquals: IsEquals<T>): (value: T, index?: number, array?: T[]) => LazyResult<T>;
export declare namespace uniqWith {
    const lazy: typeof _lazy & {
        indexed: true;
    };
}
export {};
//# sourceMappingURL=uniqWith.d.ts.map