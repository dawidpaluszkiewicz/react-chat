import { equals } from './equals';
import { pipe } from './pipe';
import { take } from './take';
import { uniqWith } from './uniqWith';
import { createCounter } from './_counter';
var source = [{ a: 1 }, { a: 2 }, { a: 2 }, { a: 5 }, { a: 1 }, { a: 6 }, { a: 7 }];
var expected = [{ a: 1 }, { a: 2 }, { a: 5 }, { a: 6 }, { a: 7 }];
describe('data_first', function () {
    test('should return uniq', function () {
        expect(uniqWith(source, equals)).toEqual(expected);
    });
});
describe('data_last', function () {
    test('should return uniq', function () {
        expect(uniqWith(equals)(source)).toEqual(expected);
    });
    it('lazy', function () {
        var counter = createCounter();
        var result = pipe([{ a: 1 }, { a: 2 }, { a: 2 }, { a: 5 }, { a: 1 }, { a: 6 }, { a: 7 }], counter.fn(), uniqWith(equals), take(3));
        expect(counter.count).toHaveBeenCalledTimes(4);
        expect(result).toEqual([{ a: 1 }, { a: 2 }, { a: 5 }]);
    });
    it('take before uniq', function () {
        // bug from https://github.com/remeda/remeda/issues/14
        var counter = createCounter();
        var result = pipe([{ a: 1 }, { a: 2 }, { a: 2 }, { a: 5 }, { a: 1 }, { a: 6 }, { a: 7 }], counter.fn(), take(3), uniqWith(equals));
        expect(counter.count).toHaveBeenCalledTimes(3);
        expect(result).toEqual([{ a: 1 }, { a: 2 }]);
    });
});
