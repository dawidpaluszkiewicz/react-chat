import { differenceWith } from './differenceWith';
import { equals } from './equals';
import { pipe } from './pipe';
import { take } from './take';
import { createCounter } from './_counter';
var source = [{ a: 1 }, { a: 2 }, { a: 3 }, { a: 4 }];
var other = [{ a: 2 }, { a: 5 }, { a: 3 }];
var expected = [{ a: 1 }, { a: 4 }];
describe('data_first', function () {
    test('should return difference', function () {
        expect(differenceWith(source, other, equals)).toEqual(expected);
    });
});
describe('data_last', function () {
    test('should return difference', function () {
        expect(differenceWith(other, equals)(source)).toEqual(expected);
    });
    test('lazy', function () {
        var counter = createCounter();
        var result = pipe([{ a: 1 }, { a: 2 }, { a: 3 }, { a: 4 }, { a: 5 }, { a: 6 }], counter.fn(), differenceWith([{ a: 2 }, { a: 3 }], equals), take(2));
        expect(counter.count).toHaveBeenCalledTimes(4);
        expect(result).toEqual([{ a: 1 }, { a: 4 }]);
    });
});
