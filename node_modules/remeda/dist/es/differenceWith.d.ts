import { LazyResult } from './_reduceLazy';
declare type IsEquals<T> = (a: T, b: T) => boolean;
/**
 * Excludes the values from `other` array.
 * Elements are compared by custom comparator isEquals.
 * @param array the source array
 * @param other the values to exclude
 * @param isEquals the comparator
 * @signature
 *    R.differenceWith(array, other, isEquals)
 * @example
 *    R.differenceWith(
 *      [{a: 1}, {a: 2}, {a: 3}, {a: 4}],
 *      [{a: 2}, {a: 5}, {a: 3}],
 *      R.equals,
 *    ) // => [{a: 1}, {a: 4}]
 * @data_first
 * @category Array
 * @pipeable
 */
export declare function differenceWith<T>(array: readonly T[], other: readonly T[], isEquals: IsEquals<T>): T[];
/**
 * Excludes the values from `other` array.
 * Elements are compared by custom comparator isEquals.
 * @param other the values to exclude
 * @param isEquals the comparator
 * @signature
 *    R.differenceWith(other, isEquals)(array)
 * @example
 *    R.differenceWith(
 *      [{a: 2}, {a: 5}, {a: 3}],
 *      R.equals,
 *    )([{a: 1}, {a: 2}, {a: 3}, {a: 4}]) // => [{a: 1}, {a: 4}]
 *    R.pipe(
 *      [{a: 1}, {a: 2}, {a: 3}, {a: 4}, {a: 5}, {a: 6}], // only 4 iterations
 *      R.differenceWith([{a: 2}, {a: 3}], R.equals),
 *      R.take(2),
 *    ) // => [{a: 1}, {a: 4}]
 * @data_last
 * @category Array
 * @pipeable
 */
export declare function differenceWith<T, K>(other: readonly T[], isEquals: IsEquals<T>): (array: readonly K[]) => T[];
export declare namespace differenceWith {
    function lazy<T>(other: T[], isEquals: IsEquals<T>): (value: T) => LazyResult<T>;
}
export {};
//# sourceMappingURL=differenceWith.d.ts.map