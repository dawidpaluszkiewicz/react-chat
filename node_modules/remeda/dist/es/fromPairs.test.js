var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { fromPairs } from './fromPairs';
var tuples = [
    ['a', 1],
    ['b', 2],
    ['c', 3],
];
describe('fromPairs', function () {
    test('generates object from pairs', function () {
        expect(fromPairs(tuples)).toEqual({
            a: 1,
            b: 2,
            c: 3,
        });
    });
    test('ignores non-tuples', function () {
        var badInput = __spreadArray(__spreadArray([], tuples, true), [undefined, [], [2]], false);
        expect(fromPairs(badInput)).toEqual({
            a: 1,
            b: 2,
            c: 3,
        });
    });
});
describe('typings', function () {
    test('arrays', function () {
        var actual = fromPairs(tuples);
        var result = true;
        expect(result).toBe(true);
    });
    test('arrays with mixed type value', function () {
        var actual = fromPairs([
            ['a', 2],
            ['b', 'c'],
        ]);
        var result = true;
        expect(result).toBe(true);
    });
});
