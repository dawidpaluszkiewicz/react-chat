"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deepMapKeys = exports.deepMap = void 0;
const common_1 = require("./common");
const deepMap = (object, mapFunction, options = {}) => {
    const cache = new WeakMap();
    const mapArray = (arr) => {
        if (cache.has(arr)) {
            return cache.get(arr);
        }
        const result = options.inPlace ? arr : [];
        cache.set(arr, result);
        const { length } = arr;
        for (let index = 0; index < length; index++) {
            result[index] = map(arr[index], index);
        }
        return result;
    };
    const mapObject = (obj) => {
        if (cache.has(obj)) {
            return cache.get(obj);
        }
        const result = options.inPlace ? obj : {};
        cache.set(obj, result);
        // eslint-disable-next-line no-restricted-syntax
        for (const key of Object.keys(obj)) {
            result[key] = map(obj[key], key);
        }
        return result;
    };
    const map = (value, key) => {
        if (Array.isArray(value))
            return mapArray(value);
        if ((0, common_1.isObject)(value))
            return mapObject(value);
        return mapFunction(value, key);
    };
    return map(object);
};
exports.deepMap = deepMap;
const deepMapKeys = (object, mapFunction) => {
    const cache = new WeakMap();
    const mapArray = (arr) => {
        if (cache.has(arr)) {
            return cache.get(arr);
        }
        const result = [];
        cache.set(arr, result);
        const { length } = arr;
        for (let i = 0; i < length; i++) {
            result.push(map(arr[i]));
        }
        return result;
    };
    const mapObject = (obj) => {
        if (cache.has(obj)) {
            return cache.get(obj);
        }
        const result = {};
        cache.set(obj, result);
        // eslint-disable-next-line no-restricted-syntax
        for (const key of Object.keys(obj)) {
            result[mapFunction(key, obj[key])] = map(obj[key]);
        }
        return result;
    };
    const map = (value) => {
        if (Array.isArray(value))
            return mapArray(value);
        if ((0, common_1.isObject)(value))
            return mapObject(value);
        return value;
    };
    return map(object);
};
exports.deepMapKeys = deepMapKeys;
//# sourceMappingURL=deepMap.js.map