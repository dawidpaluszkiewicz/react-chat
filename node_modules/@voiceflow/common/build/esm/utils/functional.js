export const isFunction = (value) => typeof value === 'function';
export const compose = (...transforms) => (value) => {
    if (transforms.length === 1) {
        return transforms[0](value);
    }
    if (transforms.length === 2) {
        return transforms[0](transforms[1](value));
    }
    return transforms.reduceRight((acc, transform) => transform(acc), value);
};
export const noop = () => undefined;
export const identity = (value) => value;
export const stringify = (value) => (typeof value === 'string' ? value : String(value));
export const chain = (...fns) => (...args) => {
    var _a, _b, _c;
    // perf optimization, most of the time we have one or two functions
    if (fns.length === 1) {
        (_a = fns[0]) === null || _a === void 0 ? void 0 : _a.call(fns, ...args);
    }
    else if (fns.length === 2) {
        (_b = fns[0]) === null || _b === void 0 ? void 0 : _b.call(fns, ...args);
        (_c = fns[1]) === null || _c === void 0 ? void 0 : _c.call(fns, ...args);
    }
    else {
        fns.forEach((fn) => fn === null || fn === void 0 ? void 0 : fn(...args));
    }
};
export const chainVoid = (...fns) => () => chain(...fns)();
export const chainAsync = (...fns) => async (...args) => {
    var _a, _b, _c;
    // perf optimization, most of the time we have one or two functions
    if (fns.length === 1) {
        await ((_a = fns[0]) === null || _a === void 0 ? void 0 : _a.call(fns, ...args));
    }
    else if (fns.length === 2) {
        await ((_b = fns[0]) === null || _b === void 0 ? void 0 : _b.call(fns, ...args));
        await ((_c = fns[1]) === null || _c === void 0 ? void 0 : _c.call(fns, ...args));
    }
    else {
        // eslint-disable-next-line no-restricted-syntax
        for (const fn of fns) {
            // eslint-disable-next-line no-await-in-loop
            await (fn === null || fn === void 0 ? void 0 : fn(...args));
        }
    }
};
export const chainVoidAsync = (...fns) => () => chainAsync(...fns)();
export const withEffect = (callback) => (value) => {
    callback(value);
    return value;
};
//# sourceMappingURL=functional.js.map