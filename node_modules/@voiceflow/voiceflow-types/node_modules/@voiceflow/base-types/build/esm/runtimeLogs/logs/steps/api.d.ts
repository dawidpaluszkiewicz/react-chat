import { APIBodyType, APIMethod } from "../../../node/api";
import { PathReference } from "../../utils";
import { BaseStepLog } from '../base';
import { StepLogKind } from '../kinds';
import { LogLevel } from '../levels';
interface ApiLogMessageRequest {
    method: APIMethod;
    url: string;
    headers: null;
    query: null;
    bodyType: null;
    body: null;
}
interface ApiLogMessageResponse {
    statusCode: number;
    statusText: string;
    headers: null;
    body: null;
}
interface ApiLogMessage {
    request: ApiLogMessageRequest;
    response: ApiLogMessageResponse;
}
declare type VerboseApiLogMessageRequest = {
    url: string;
    headers: Record<string, string>;
    query: Record<string, string>;
} & ({
    method: Exclude<APIMethod, APIMethod.GET>;
    bodyType: APIBodyType;
    body: string;
} | {
    method: APIMethod.GET;
    bodyType: null;
    body: null;
});
interface VerboseApiLogMessageResponse {
    statusCode: number;
    statusText: string;
    headers: Record<string, string>;
    body: string;
}
interface VerboseApiLogMessage {
    request: VerboseApiLogMessageRequest;
    response: VerboseApiLogMessageResponse;
}
export declare type ApiStepLog = BaseStepLog<StepLogKind.API, PathReference & ApiLogMessage, LogLevel.INFO> | BaseStepLog<StepLogKind.API, PathReference & VerboseApiLogMessage, LogLevel.VERBOSE> | BaseStepLog<StepLogKind.API, PathReference & (ApiLogMessage | VerboseApiLogMessage), LogLevel.ERROR>;
export {};
