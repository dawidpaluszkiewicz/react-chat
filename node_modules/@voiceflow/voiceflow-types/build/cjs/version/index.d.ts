import { DeepPartialByKey } from '@voiceflow/base-types';
import { ProjectType } from "../constants";
import { SupportedProjectType } from '../project';
import { ChatPlatformData, ChatSettings, ChatVersion } from './chat';
import { VoicePlatformData, VoiceSettings, VoiceVersion } from './voice';
export * from './base';
export * from './chat';
export * from './voice';
export interface PlatformDataPerType {
    [ProjectType.CHAT]: ChatPlatformData;
    [ProjectType.VOICE]: VoicePlatformData;
}
export interface SettingsPerType {
    [ProjectType.CHAT]: ChatSettings;
    [ProjectType.VOICE]: VoiceSettings;
}
export interface VersionPerType {
    [ProjectType.CHAT]: ChatVersion;
    [ProjectType.VOICE]: VoiceVersion;
}
export declare type Version = VersionPerType[SupportedProjectType];
export declare type Settings = SettingsPerType[SupportedProjectType];
export declare type PlatformData = PlatformDataPerType[SupportedProjectType];
export declare type Intent = PlatformData['intents'] extends (infer I)[] ? I : never;
export declare const defaultPlatformData: <T extends SupportedProjectType>(type: T, platformData: DeepPartialByKey<PlatformDataPerType[T], "settings">) => PlatformDataPerType[T];
export declare const defaultSettings: <T extends SupportedProjectType>(type: T, platformData: Partial<SettingsPerType[T]>) => SettingsPerType[T];
