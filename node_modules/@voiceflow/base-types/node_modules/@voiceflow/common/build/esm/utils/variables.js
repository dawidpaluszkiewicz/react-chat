import { READABLE_VARIABLE_REGEXP } from "../constants";
export const variableReplacer = (match, inner, variables, modifier) => {
    if (inner in variables) {
        return typeof modifier === 'function' ? modifier(variables[inner]) : variables[inner];
    }
    return match;
};
export const replaceVariables = (phrase, variables, modifier = undefined, { trim = true } = {}) => {
    if (!phrase || (trim && !phrase.trim())) {
        return '';
    }
    return phrase.replace(READABLE_VARIABLE_REGEXP, (match, inner) => String(variableReplacer(match, inner, variables, modifier)));
};
// turn float variables to 2 decimal places
export const sanitizeVariables = (variables) => Object.entries(variables).reduce((acc, [key, value]) => {
    if (typeof value === 'number' && !Number.isInteger(value)) {
        acc[key] = value.toFixed(2);
    }
    else {
        acc[key] = value;
    }
    return acc;
}, {});
export const transformStringVariableToNumber = (str) => {
    if (typeof str === 'number') {
        return str;
    }
    if ((str === null || str === void 0 ? void 0 : str.startsWith('0')) && str.length > 1) {
        return str;
    }
    const number = Number(str);
    return Number.isNaN(number) ? str : number;
};
export const deepVariableSubstitution = (bodyData, variableMap) => {
    const _recurse = (subCollection, modifier) => {
        if (!subCollection) {
            return subCollection;
        }
        if (typeof subCollection === 'string') {
            return replaceVariables(subCollection, variableMap, modifier);
        }
        if (Array.isArray(subCollection)) {
            return subCollection.map((v) => _recurse(v, modifier));
        }
        if (typeof subCollection === 'object') {
            Object.keys(subCollection).forEach((key) => {
                // eslint-disable-next-line no-param-reassign
                subCollection[key] =
                    key === 'url' ? _recurse(subCollection[key], (variable) => encodeURI(decodeURI(String(variable)))) : _recurse(subCollection[key]);
            });
            return subCollection;
        }
        return subCollection;
    };
    return _recurse(bodyData);
};
//# sourceMappingURL=variables.js.map