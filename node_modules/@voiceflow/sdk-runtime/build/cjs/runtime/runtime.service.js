"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuntimeService = void 0;
const http_errors_1 = __importDefault(require("http-errors"));
class RuntimeService {
    constructor(options) {
        this.options = options;
        this.fetch = options.fetchPonyfill ?? globalThis.fetch?.bind(globalThis);
        if (!this.fetch) {
            throw new TypeError('fetch implementation was not provided and a global fetch was not available');
        }
    }
    async send(path, args = {}) {
        const url = new URL(path, this.options.url);
        if (args.params)
            url.search = args.params.toString();
        const result = await this.fetch(url, {
            method: args.method ?? 'GET',
            body: args.body ? JSON.stringify(args.body) : undefined,
            headers: {
                'content-type': 'application/json',
                ...(args.headers ?? {}),
            },
        });
        const json = (await result.json().catch(() => null));
        if (!result.ok) {
            throw (0, http_errors_1.default)(result.status, result.statusText, json);
        }
        return json;
    }
}
exports.RuntimeService = RuntimeService;
