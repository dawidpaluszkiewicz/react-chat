import type { BaseModels } from '@voiceflow/base-types';
import type { RuntimeFeedbackRequest, RuntimeHttpRequest, RuntimeInteractRequest, RuntimeInteractResponse, RuntimeOptions } from './runtime.interface';
export declare abstract class RuntimeService {
    private readonly options;
    private readonly fetch;
    constructor(options: RuntimeOptions);
    abstract getPublishing(request: {
        versionID?: string;
    }): Promise<Record<string, unknown>>;
    abstract createTranscript(sessionID: string, metadata: {
        os?: string;
        user?: {
            name?: string;
            image?: string;
        };
        device?: string;
        browser?: string;
    }): Promise<BaseModels.Transcript.Model>;
    abstract interact(request: RuntimeInteractRequest): Promise<Partial<RuntimeInteractResponse> & Pick<RuntimeInteractResponse, 'trace'>>;
    abstract feedback(request: RuntimeFeedbackRequest): Promise<void>;
    protected send<T>(path: string, args?: RuntimeHttpRequest): Promise<T>;
}
//# sourceMappingURL=runtime.service.d.ts.map