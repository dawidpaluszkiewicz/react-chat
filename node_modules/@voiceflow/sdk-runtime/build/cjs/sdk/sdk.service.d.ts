import type { RuntimeFeedbackRequest, RuntimeInteractRequest, RuntimeService } from '../runtime';
import type { TraceDeclaration } from '../trace/trace.interface.js';
import type { VoiceflowRuntimeOptions } from './sdk.interface.js';
export declare class VoiceflowRuntime<T> {
    private readonly runtime;
    private readonly trace;
    constructor(options: VoiceflowRuntimeOptions<T>);
    registerStep(step: TraceDeclaration<T, any>): this;
    interact(context: T, request: RuntimeInteractRequest): Promise<T>;
    feedback(request: RuntimeFeedbackRequest): Promise<void>;
    getPublishing(...options: Parameters<RuntimeService['getPublishing']>): Promise<Record<string, unknown>>;
    createTranscript(...options: Parameters<RuntimeService['createTranscript']>): Promise<import("@voiceflow/base-types/build/cjs/models/transcripts.js").Model>;
}
//# sourceMappingURL=sdk.service.d.ts.map