import { AuthRuntimeService, isAuthRuntimeOptions, isPublicRuntimeOptions, PublicRuntimeService } from '../runtime/index.js';
import { TraceService } from '../trace/trace.service.js';
export class VoiceflowRuntime {
    constructor(options) {
        this.trace = new TraceService(options);
        if (isAuthRuntimeOptions(options)) {
            this.runtime = new AuthRuntimeService(options);
        }
        else if (isPublicRuntimeOptions(options)) {
            this.runtime = new PublicRuntimeService(options);
        }
        else {
            throw new Error('invalid runtime options');
        }
    }
    registerStep(step) {
        this.trace.registerTrace(step);
        return this;
    }
    async interact(context, request) {
        const response = await this.runtime.interact(request);
        return this.trace.processTrace(context, response);
    }
    async feedback(request) {
        return this.runtime.feedback(request);
    }
    async getPublishing(...options) {
        return this.runtime.getPublishing(...options);
    }
    async createTranscript(...options) {
        return this.runtime.createTranscript(...options);
    }
}
