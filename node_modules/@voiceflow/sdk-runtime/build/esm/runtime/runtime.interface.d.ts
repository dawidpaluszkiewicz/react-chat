import { BaseRequest, Trace } from '@voiceflow/base-types';
export { Trace } from '@voiceflow/base-types';
declare type FetchFn = (...parameters: any[]) => Promise<any>;
export interface RuntimeOptions<V = AuthVerify | PublicVerify> {
    url: string;
    verify: V;
    /**
     * A ponyfill to use for `fetch()`.
     * Defaults to the global `fetch()`.
     */
    fetchPonyfill?: FetchFn;
}
export interface AuthVerify {
    authorization: string;
}
export interface PublicVerify {
    projectID: string;
}
export declare const isAuthRuntimeOptions: (options: RuntimeOptions<Partial<AuthVerify & PublicVerify>>) => options is RuntimeOptions<AuthVerify>;
export declare const isPublicRuntimeOptions: (options: RuntimeOptions<Partial<AuthVerify & PublicVerify>>) => options is RuntimeOptions<PublicVerify>;
export interface RuntimeInteractRequest {
    action: RuntimeAction;
    sessionID: string;
    versionID?: string;
    config?: any;
}
export interface RuntimeFeedbackRequest {
    name: string;
    sessionID: string;
    versionID?: string;
    [key: string]: any;
}
export interface RuntimeInteractResponse {
    state: RuntimeState;
    request: RuntimeAction;
    trace: Trace.AnyTrace[];
}
export declare type RuntimeAction = BaseRequest.TextRequest | BaseRequest.LaunchRequest | BaseRequest.IntentRequest | BaseRequest.ActionRequest | BaseRequest.GeneralRequest | BaseRequest.BaseRequest<unknown>;
export declare const isRuntimeAction: (value: unknown) => value is RuntimeAction;
export interface IntentActionPayload {
    query: string;
    intent: {
        name: string;
    };
    entities: {
        name: string;
        value: string;
    }[];
    confidence?: number;
}
export declare type IntentAction = BaseRequest.IntentRequest;
export declare type ActionType = BaseRequest.RequestType;
export declare const ActionType: typeof BaseRequest.RequestType;
export declare const createIntentAction: (payload: BaseRequest.IntentRequestPayload) => BaseRequest.IntentRequest;
export interface RuntimeState {
    storage: Record<string, any>;
    variables: Record<string, any>;
}
export declare const isRuntimeTraceType: (value: unknown) => value is Trace.TraceType;
export declare const isRuntimeTrace: (value: unknown) => value is Trace.BaseTraceFrame<any, import("@voiceflow/base-types/build/cjs/node/utils").BaseTraceFramePath<import("@voiceflow/base-types/build/cjs/node/utils").BaseEvent>>;
export interface RuntimeHttpRequest {
    method?: string;
    params?: URLSearchParams;
    body?: any;
    headers?: HeadersInit;
}
//# sourceMappingURL=runtime.interface.d.ts.map