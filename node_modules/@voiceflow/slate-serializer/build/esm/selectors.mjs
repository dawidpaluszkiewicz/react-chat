import { Text } from '@voiceflow/base-types';
import { convertCSSPropertiesToStyles } from './styles.mjs';
export const getElementCSSProperties = (element) => {
    const textAlign = element[Text.ElementProperty.TEXT_ALIGN];
    const styles = {};
    if (textAlign)
        styles.textAlign = textAlign;
    return styles;
};
export const getTextCSSProperties = (text) => {
    const color = text[Text.TextProperty.COLOR];
    const isItalic = text[Text.TextProperty.ITALIC];
    const fontWeight = text[Text.TextProperty.FONT_WEIGHT];
    const fontFamily = text[Text.TextProperty.FONT_FAMILY];
    const isUnderline = text[Text.TextProperty.UNDERLINE];
    const isStrikeThrough = text[Text.TextProperty.STRIKE_THROUGH];
    const styles = {};
    if (color)
        styles.color = `rgba(${color.r},${color.g},${color.b},${color.a})`;
    if (isItalic)
        styles.fontStyle = 'italic';
    if (fontWeight)
        styles.fontWeight = Number(fontWeight);
    if (fontFamily)
        styles.fontFamily = `"${fontFamily}"`;
    if (isUnderline || isStrikeThrough) {
        let decoration = '';
        if (isUnderline)
            decoration += 'underline';
        if (isStrikeThrough)
            decoration += ' line-through';
        styles.textDecoration = decoration.trim();
    }
    return styles;
};
export const getElementStyles = (element) => convertCSSPropertiesToStyles(getElementCSSProperties(element));
export const getTextStyles = (text) => convertCSSPropertiesToStyles(getTextCSSProperties(text));
//# sourceMappingURL=selectors.mjs.map