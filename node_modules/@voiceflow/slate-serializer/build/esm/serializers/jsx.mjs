import React from 'react';
import * as Slate from 'slate';
import { isLinkElement, isVariableElement } from '../guards.mjs';
import { getElementCSSProperties, getTextCSSProperties } from '../selectors.mjs';
const serializeTextNode = (node, index) => {
    const styles = getTextCSSProperties(node);
    return (React.createElement("span", { key: index, style: styles }, node.text || React.createElement(React.Fragment, null, "\uFEFF")));
};
const serializeLinkElement = (node, index, options) => {
    var _a, _b, _c, _d;
    const children = node.children.map(serializeNodeFactory(options));
    const styles = getElementCSSProperties(node);
    const href = (_d = (_c = (_a = options === null || options === void 0 ? void 0 : options.transformHref) === null || _a === void 0 ? void 0 : _a.call(options, (_b = node.url) !== null && _b !== void 0 ? _b : '')) !== null && _c !== void 0 ? _c : node.url) !== null && _d !== void 0 ? _d : '';
    return (React.createElement("a", { key: index, rel: "noopener noreferrer", href: href, target: "_blank", style: Object.assign(Object.assign({}, styles), { pointerEvents: 'all' }), onClick: (event) => {
            var _a;
            event.stopPropagation();
            event.preventDefault();
            if (href) {
                (_a = window.open(href, '_blank', 'noopener=true,noreferrer=true')) === null || _a === void 0 ? void 0 : _a.focus();
            }
        } }, children));
};
const serializeVariableElement = (node, index) => React.createElement("span", { key: index }, `{${node.name}}`);
const serializeElementNode = (node, index, options) => {
    if (isLinkElement(node))
        return serializeLinkElement(node, index, options);
    if (isVariableElement(node))
        return serializeVariableElement(node, index);
    const children = node.children.map(serializeNodeFactory(options));
    const styles = getElementCSSProperties(node);
    return (React.createElement("div", { key: index, style: styles }, children));
};
const serializeNodeFactory = (options) => (node, index) => 
// eslint-disable-next-line no-nested-ternary
Slate.Text.isText(node) ? serializeTextNode(node, index) : Slate.Element.isElement(node) ? serializeElementNode(node, index, options) : null;
export const serializeToJSX = (content, options) => content.map(serializeNodeFactory(options));
//# sourceMappingURL=jsx.mjs.map