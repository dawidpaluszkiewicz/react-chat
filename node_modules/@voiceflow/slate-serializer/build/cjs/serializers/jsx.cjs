"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeToJSX = void 0;
const react_1 = __importDefault(require("react"));
const Slate = __importStar(require("slate"));
const guards_1 = require("../guards.cjs");
const selectors_1 = require("../selectors.cjs");
const serializeTextNode = (node, index) => {
    const styles = (0, selectors_1.getTextCSSProperties)(node);
    return (react_1.default.createElement("span", { key: index, style: styles }, node.text || react_1.default.createElement(react_1.default.Fragment, null, "\uFEFF")));
};
const serializeLinkElement = (node, index, options) => {
    var _a, _b, _c, _d;
    const children = node.children.map(serializeNodeFactory(options));
    const styles = (0, selectors_1.getElementCSSProperties)(node);
    const href = (_d = (_c = (_a = options === null || options === void 0 ? void 0 : options.transformHref) === null || _a === void 0 ? void 0 : _a.call(options, (_b = node.url) !== null && _b !== void 0 ? _b : '')) !== null && _c !== void 0 ? _c : node.url) !== null && _d !== void 0 ? _d : '';
    return (react_1.default.createElement("a", { key: index, rel: "noopener noreferrer", href: href, target: "_blank", style: Object.assign(Object.assign({}, styles), { pointerEvents: 'all' }), onClick: (event) => {
            var _a;
            event.stopPropagation();
            event.preventDefault();
            if (href) {
                (_a = window.open(href, '_blank', 'noopener=true,noreferrer=true')) === null || _a === void 0 ? void 0 : _a.focus();
            }
        } }, children));
};
const serializeVariableElement = (node, index) => react_1.default.createElement("span", { key: index }, `{${node.name}}`);
const serializeElementNode = (node, index, options) => {
    if ((0, guards_1.isLinkElement)(node))
        return serializeLinkElement(node, index, options);
    if ((0, guards_1.isVariableElement)(node))
        return serializeVariableElement(node, index);
    const children = node.children.map(serializeNodeFactory(options));
    const styles = (0, selectors_1.getElementCSSProperties)(node);
    return (react_1.default.createElement("div", { key: index, style: styles }, children));
};
const serializeNodeFactory = (options) => (node, index) => 
// eslint-disable-next-line no-nested-ternary
Slate.Text.isText(node) ? serializeTextNode(node, index) : Slate.Element.isElement(node) ? serializeElementNode(node, index, options) : null;
const serializeToJSX = (content, options) => content.map(serializeNodeFactory(options));
exports.serializeToJSX = serializeToJSX;
//# sourceMappingURL=jsx.cjs.map