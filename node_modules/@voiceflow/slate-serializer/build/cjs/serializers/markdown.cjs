"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeToMarkdown = void 0;
const base_types_1 = require("@voiceflow/base-types");
const Slate = __importStar(require("slate"));
const guards_1 = require("../guards.cjs");
const serializeTextNode = (node) => {
    const isItalic = node[base_types_1.Text.TextProperty.ITALIC];
    const isUnderline = node[base_types_1.Text.TextProperty.UNDERLINE];
    const isStrikeThrough = node[base_types_1.Text.TextProperty.STRIKE_THROUGH];
    const fontWeight = node[base_types_1.Text.TextProperty.FONT_WEIGHT];
    let { text } = node;
    if (!text.trim())
        return text;
    // Extract leading and trailing whitespaces
    const leadingWhitespace = text.match(/^\s+/) || '';
    const trailingWhitespace = text.match(/\s+$/) || '';
    // Trim the text to remove leading and trailing whitespaces
    text = text.trim();
    if (isItalic)
        text = `*${text}*`;
    if (isUnderline)
        text = `<u>${text}</u>`;
    if (isStrikeThrough)
        text = `~~${text}~~`;
    if (fontWeight)
        text = `**${text}**`;
    // Add the leading and trailing whitespaces back to the outside of the markers
    return `${leadingWhitespace}${text}${trailingWhitespace}`;
};
const serializeLinkElement = (node) => {
    var _a;
    const children = node.children.map(serializeNodeFactory());
    return `[${children}](${(_a = node.url) === null || _a === void 0 ? void 0 : _a.replace(/\s+/g, '')})`;
};
const serializeVariableElement = (node) => `{${node.name}}`;
const serializeElementNode = (node) => {
    if ((0, guards_1.isLinkElement)(node))
        return serializeLinkElement(node);
    if ((0, guards_1.isVariableElement)(node))
        return serializeVariableElement(node);
    return node.children.map(serializeNodeFactory()).join('');
};
const serializeNodeFactory = () => (node) => 
// eslint-disable-next-line no-nested-ternary
Slate.Text.isText(node) ? serializeTextNode(node) : Slate.Element.isElement(node) ? serializeElementNode(node) : '';
const serializeToMarkdown = (content) => content
    .map(serializeNodeFactory())
    .join('\n')
    .replace(/\n{3,}/g, (match) => `\n${'<br/>'.repeat(match.length - 2)}\n\n`);
exports.serializeToMarkdown = serializeToMarkdown;
//# sourceMappingURL=markdown.cjs.map