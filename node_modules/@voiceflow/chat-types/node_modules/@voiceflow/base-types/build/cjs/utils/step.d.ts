import * as BaseModels from "../models";
import * as Node from "../node";
export declare const createStepTypeguard: <R extends BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>>(values: R["type"] | R["type"][]) => (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is R;
export declare const isIf: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.If.Step<Node.If.StepData>;
export declare const isUrl: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.Url.Step<Node.Url.StepData>;
export declare const isSet: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.Set.Step<Node.Set.StepData>;
export declare const isApi: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.Api.Step<Node.Api.StepData>;
export declare const isText: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.Text.Step<Node.Text.StepData>;
export declare const isCard: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.Card.Step<Node.Card.StepData>;
export declare const isCardV2: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.CardV2.Step<Node.CardV2.StepData<Node.CardV2.CardV2Button>>;
export declare const isIfV2: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.IfV2.Step<Node.IfV2.StepData>;
export declare const isFlow: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.Flow.Step<Node.Component.StepData>;
export declare const isGoTo: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.GoTo.Step<Node.GoTo.StepData>;
export declare const isCode: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.Code.Step<Node.Code.StepData>;
export declare const isExit: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.Exit.Step<import("@voiceflow/common").Struct>;
export declare const isSpeak: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.Speak.Step<Node.Speak.StepData>;
export declare const isStart: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.Start.Step<Node.Start.StepData>;
export declare const isSetV2: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.SetV2.Step<Node.SetV2.StepData>;
export declare const isPrompt: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.Prompt.Step<Node.Prompt.StepData>;
export declare const isCarousel: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.Carousel.Step<Node.Carousel.StepData>;
export declare const isVisual: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.Visual.Step<Node.Visual.StepData>;
export declare const isIntent: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.Intent.Step<Node.Intent.StepData>;
export declare const isStream: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.Stream.Step<Node.Stream.StepData, Node.Stream.StepPorts<Node.Stream.StepDefaultBuiltPorts>>;
export declare const isZapier: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.Zapier.Step<Node.Zapier.StepData>;
export declare const isRandom: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.Random.Step<Node.Random.StepData>;
export declare const isRandomV2: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.RandomV2.Step<Node.RandomV2.StepData>;
export declare const isCommand: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.Command.Step<Node.Command.StepData>;
export declare const isButtons: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.Buttons.Step<Node.Buttons.StepData>;
export declare const isCapture: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.Capture.Step<Node.Capture.StepData>;
export declare const isGeneral: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.General.Step<Node.General.StepData<Node.General.AnyTrace>>;
export declare const isGoToNode: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.GoToNode.Step<Node.GoToNode.StepData>;
export declare const isDirective: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.Directive.Step<Node.Directive.StepData>;
export declare const isComponent: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.Component.Step<Node.Component.StepData>;
export declare const isCaptureV2: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.CaptureV2.Step<Node.CaptureV2.StepData>;
export declare const isGoToDomain: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.GoToDomain.Step<Node.GoToDomain.StepData>;
export declare const isDeprecated: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord> & {
    type: Node.NodeType.DEPRECATED;
};
export declare const isInteraction: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.Interaction.Step<Node.Interaction.StepData>;
export declare const isGoogleSheets: (value: BaseModels.BaseDiagramNode<import("@voiceflow/common").AnyRecord>) => value is Node.GoogleSheets.Step<Node.GoogleSheets.StepData>;
